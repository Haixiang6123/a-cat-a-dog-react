{"version":3,"sources":["axios/index.ts","axios/secret.ts","Child.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["catAxios","axios","create","baseURL","headers","x-api-key","Child","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react","className","React","Wrapper","styled","div","_templateObject","App","_this","vote","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","state","animals","post","image_id","sub_id","value","stop","get","response","votes","console","log","setState","data","_this2","react_default","createElement","Button_default","variant","color","src_Child","map","animal","key","id","src","url","alt","JSON","stringify","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAGMA,EAAWC,IAAMC,OAAO,CAC5BC,QAAS,+BACTC,QAAS,CACPC,YCNkB,6CDSLJ,IAAMC,OAAO,CAC5BC,QAAS,+BACTC,QAAS,CACPC,YCXkB,kECsBPC,cAbb,SAAAA,EAAYC,GAAgB,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACpBH,0EAIN,OACEO,EAAA,qBAAKC,UAAU,UAAf,gBAPcC,qKCFpB,IAAMC,EAAUC,IAAOC,IAAVC,KAqEEC,cAvDb,SAAAA,EAAYd,GAAe,IAAAe,EAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACzBC,EAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMH,KAeAgB,KAhBmBf,OAAAgB,EAAA,EAAAhB,CAAAiB,EAAAC,EAAAC,KAgBZ,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACOV,EAAKW,MAAjBC,QADKJ,EAAAE,KAAA,EAEPhC,EAASmC,KAAK,SAAU,CAC5BC,SAAU,YACVC,OAAQ,WACRC,MAAO,IALI,wBAAAR,EAAAS,SAAAX,MAdbN,EAAKW,MAAQ,CACXC,QAAS,IAHcZ,mNAQFtB,EAASwC,IAAI,gCAA9BC,kBACczC,EAASwC,IAAI,iCAA3BE,SACNC,QAAQC,IAAIF,GACZhC,KAAKmC,SAAS,CACZX,QAASO,EAASK,0IAab,IAAAC,EAAArC,KACP,OACEsC,EAAAtB,EAAAuB,cAAChC,EAAD,YAEE+B,EAAAtB,EAAAuB,cAACC,EAAAxB,EAAD,CAAQyB,QAAQ,YAAYC,MAAM,WAAlC,eAGAJ,EAAAtB,EAAAuB,cAAA,OAAKlC,UAAU,UAAf,gBAGAiC,EAAAtB,EAAAuB,cAACI,EAAD,MACAL,EAAAtB,EAAAuB,cAAA,OAAKlC,UAAU,SAAf,OAIEL,KAAKuB,MAAMC,QAAQoB,IAAI,SAAAC,GAAM,OAC3BP,EAAAtB,EAAAuB,cAAA,OAAKO,IAAKD,EAAOE,IACfT,EAAAtB,EAAAuB,cAAA,OAAKS,IAAKH,EAAOI,IAAKC,IAAI,cAC1BZ,EAAAtB,EAAAuB,cAAA,WACGY,KAAKC,UAAUP,IAElBP,EAAAtB,EAAAuB,cAACC,EAAAxB,EAAD,CAAQqC,QAAShB,EAAKxB,MAAtB,mBA/CIyC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAtB,EAAAuB,cAACuB,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a841bf2.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { catKey, dogKey } from \"./secret\"\r\n\r\nconst catAxios = axios.create({\r\n  baseURL: 'https://api.thecatapi.com/v1',\r\n  headers: {\r\n    'x-api-key': catKey\r\n  }\r\n});\r\nconst dogAxios = axios.create({\r\n  baseURL: 'https://api.thecatapi.com/v1',\r\n  headers: {\r\n    'x-api-key': dogKey\r\n  }\r\n});\r\n\r\nexport {\r\n  catAxios,\r\n  dogAxios\r\n}\r\n","export const catKey = '416848bd-ea2f-4d38-a329-0e858ab5cd38'\r\nexport const dogKey = '89e98203-1b5b-4c32-a67b-e314bf19f4c5'\r\n","import * as React from 'react'\r\n\r\ninterface IProps {\r\n\r\n}\r\ninterface IState {\r\n\r\n}\r\n\r\nclass Child extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props)\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"change\">\r\n        Child\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Child\r\n","import React, {Component} from 'react';\nimport { catAxios, dogAxios } from \"./axios\"\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button'\nimport Child from './Child'\nimport './App.scss'\n\nconst Wrapper = styled.div`\n  text-align: center;\n  color: red;\n  .change {\n    color: green;\n  }\n`\n\ninterface IProps { }\ninterface IState {\n  animals: any[]\n}\n\nclass App extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      animals: []\n    }\n  }\n\n  public async componentDidMount() {\n    const response = await catAxios.get('/images/search')\n    const votes = await catAxios.get('/votes?sub_id=hai_test')\n    console.log(votes)\n    this.setState({\n      animals: response.data\n    })\n  }\n\n  private vote = async () => {\n    const { animals } = this.state\n    await catAxios.post('/votes', {\n      image_id: 'eUKD6V2pm',\n      sub_id: 'hai_test',\n      value: 1\n    })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        Test\n        <Button variant=\"contained\" color=\"primary\">\n          Hello World\n        </Button>\n        <div className=\"change\">\n          Change Color\n        </div>\n        <Child/>\n        <div className=\"hello\">\n          Yes\n        </div>\n        {\n          this.state.animals.map(animal =>\n            <div key={animal.id}>\n              <img src={animal.url} alt=\"animalImg\"/>\n              <div>\n                {JSON.stringify(animal)}\n              </div>\n              <Button onClick={this.vote}>Vote</Button>\n            </div>\n          )\n        }\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}