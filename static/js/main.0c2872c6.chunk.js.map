{"version":3,"sources":["axios/index.ts","axios/secret.ts","store/axios/reducer.ts","store/actionTypes.ts","store/reducers.ts","store/store.ts","serviceWorker.ts","Child.tsx","services/images.ts","App.tsx","store/axios/actions.ts","index.tsx"],"names":["catAxios","axios","create","baseURL","headers","x-api-key","dogAxios","mapper","CAT","DOG","reducer","state","arguments","length","undefined","action","type","console","log","payload","combineReducers","store","createStore","reducers","Boolean","window","location","hostname","match","Child","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react","className","React","getState","services_images","params","get","then","response","data","Wrapper","styled","div","_templateObject","App","_this","vote","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","animals","post","image_id","sub_id","value","stop","updateAxios","imagesService","resources","votes","setState","_this2","react_default","createElement","Button_default","variant","color","src_Child","map","animal","key","id","src","url","alt","JSON","stringify","onClick","Component","mapDispatchToProps","connect","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c2872c6.chunk.js","sourcesContent":["import axios, {AxiosInstance} from 'axios';\r\nimport { catKey, dogKey } from \"./secret\"\r\n\r\nconst catAxios: AxiosInstance = axios.create({\r\n  baseURL: 'https://api.thecatapi.com/v1',\r\n  headers: {\r\n    'x-api-key': catKey\r\n  }\r\n});\r\nconst dogAxios: AxiosInstance = axios.create({\r\n  baseURL: 'https://api.thedogapi.com/v1',\r\n  headers: {\r\n    'x-api-key': dogKey\r\n  }\r\n});\r\n\r\nexport {\r\n  catAxios,\r\n  dogAxios\r\n}\r\n","export const catKey = '416848bd-ea2f-4d38-a329-0e858ab5cd38'\r\nexport const dogKey = '89e98203-1b5b-4c32-a67b-e314bf19f4c5'\r\n","import {UPDATE_AXIOS} from \"../actionTypes\";\r\nimport {AxiosInstance} from \"axios\"\r\nimport {catAxios, dogAxios} from \"../../axios\"\r\nimport {IAxiosAction, IAxiosMapper} from \"./index\"\r\n\r\nconst mapper: IAxiosMapper = {\r\n  CAT: catAxios,\r\n  DOG: dogAxios\r\n}\r\n\r\nconst reducer = (state: AxiosInstance=catAxios, action: IAxiosAction<string>) => {\r\n  switch (action.type) {\r\n    case UPDATE_AXIOS:\r\n      console.log(mapper[action.payload])\r\n      return mapper[action.payload]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","export const UPDATE_AXIOS: string = 'UPDATE_AXIOS'\r\n","import axios from './axios/reducer'\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({\r\n  axios: axios\r\n})\r\n","import { createStore } from \"redux\";\r\nimport reducers from './reducers'\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\r\n\r\ninterface IProps {\r\n\r\n}\r\ninterface IState {\r\n\r\n}\r\n\r\nclass Child extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props)\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"change\">\r\n        Child\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Child\r\n","import store from '../store/store'\r\n\r\nconst axios = store.getState().axios\r\n\r\nexport default {\r\n  getImages: (params?: IGetImagesParams) => {\r\n    return axios\r\n      .get(`/images/search`, {params})\r\n      .then((response: any) => response.data)\r\n  },\r\n  getImageById: (imageId: string, params: IGetImageByIdParams) => {\r\n    return axios\r\n      .get(`/images/${imageId}`, {params})\r\n      .then((response: any) => response.data)\r\n  },\r\n  getUploadedImages: (params: IGetUploadedImagesParams) => {\r\n    return axios\r\n      .get(`/images`, {params})\r\n      .then((response: any) => response.data)\r\n  },\r\n  uploadImage: (data: IUploadImageData) => {\r\n    return axios\r\n      .post(`/images/upload`, data)\r\n      .then((response: any) => response.data)\r\n  },\r\n  deleteImage: (imageId: string) => {\r\n    return axios\r\n      .delete(`/images/${imageId}`)\r\n      .then((response: any) => response.data)\r\n  },\r\n  analyzeImage: (imageId: string) => {\r\n    return axios\r\n      .get(`/images/${imageId}/analysis`)\r\n      .then((response: any) => response.data)\r\n  }\r\n}\r\n","import React, {Component} from 'react';\nimport {updateAxios} from \"./store/axios/actions\"\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button'\nimport {connect} from \"react-redux\"\nimport {IAxiosStore} from \"./store\"\nimport {IAppActionProps, IAppStoreProps, IAppState, IAppProps} from \"./env\"\nimport Child from './Child'\nimport imagesService from './services/images'\nimport './App.scss'\n\nconst Wrapper = styled.div`\n  text-align: center;\n  color: red;\n  .change {\n    color: green;\n  }\n`\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      animals: []\n    }\n  }\n\n  public async componentDidMount() {\n    await this.props.updateAxios('DOG')\n    const resources = await imagesService.getImages()\n    const votes = await this.props.axios.get('/votes?sub_id=hai_test')\n    console.log(votes)\n    this.setState({\n      animals: resources\n    })\n  }\n\n  private vote = async () => {\n    const { animals } = this.state\n    await this.props.axios.post('/votes', {\n      image_id: 'eUKD6V2pm',\n      sub_id: 'hai_test',\n      value: 1\n    })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        Test\n        <Button variant=\"contained\" color=\"primary\">\n          Hello World\n        </Button>\n        <div className=\"change\">\n          Change Color\n        </div>\n        <Child/>\n        <div className=\"hello\">\n          Yes {this.props.a}\n        </div>\n        {\n          this.state.animals.map(animal =>\n            <div key={animal.id}>\n              <img src={animal.url} alt=\"animalImg\"/>\n              <div>\n                {JSON.stringify(animal)}\n              </div>\n              <Button onClick={this.vote}>Vote</Button>\n            </div>\n          )\n        }\n      </Wrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IAxiosStore): IAppStoreProps => ({\n  axios: state.axios\n})\nconst mapDispatchToProps: IAppActionProps = {\n  updateAxios\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {UPDATE_AXIOS} from \"../actionTypes\"\r\nimport {IAxiosAction} from \"./index\"\r\n\r\nexport const updateAxios = (payload: 'CAT'|'DOG'): IAxiosAction<string> => {\r\n  return {\r\n    type: UPDATE_AXIOS,\r\n    payload\r\n  }\r\n}\r\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Redux\nimport {Provider} from \"react-redux\"\nimport store from './store/store'\n// utils\nimport * as serviceWorker from './serviceWorker';\n// Root component\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App a={'hello'}/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}